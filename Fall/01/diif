68a69
> 		#frc_ts['Month'] = ts['Month']
85d85
< 
111,152d110
< 
< 
< 
< # Start with this code
< ###################### Winters Exponential Smoothing #########################
< # x <array Tx1>- time series, 
< # h <scalar> - forecasting delay
< # Params <dict> - dictionary with 
< #    alpha <scalar in [0,1]> - smoothing parameter
< #    delts <scalar in [0,1]> - seasonality smoothing parameter
< 
< def WintersExponentialSmoothing(x, h, Params):
<     T = len(x)
<     alpha = Params['alpha']
<     delta = Params['delta']
<     p = Params['seasonality_period']
<     
<     FORECAST = [np.NaN] * (T + h)
<     
<     l= np.NaN
<     s= [np.NaN] * (T + 2 * p)
<     
<     full_cycles_num = T / p
<     ashki = []
<     for j in range(full_cycles_num):
<         ashki.append(sum([x[p * (j - 1) + i] for i in range(p)]))
<     
<     for t in range(T):
<         if not math.isnan(x[t]):
<             this_ind = t % p 
<             if math.isnan(l):
<                 l=  1./ (p ** 2.) * (x[p : 2 * p].sum() - x[:p].sum())
<  
<             if math.isnan(s[this_ind]):
<                 s[this_ind]= 1. / full_cycles_num * sum([x[p * (j - 1) + this_ind] / float(ashki[j]) for j in range(full_cycles_num)]) 
<              
<             l_old = l
<             l = alpha * (x[t] - s[t - p]) + (1 - alpha) * l
<             s[t] = delta * (x[t] - l_old) + (1. - delta) * s[t - p]
<             
<         FORECAST[t+h] = l + s[t - p + h % p]
<     return FORECAST
\ No newline at end of file
